#!/usr/bin/env pwsh

Write-Host "`nüß™ TEST PERMISSION-BASED MENU SYSTEM" -ForegroundColor Cyan
Write-Host "=" * 80 -ForegroundColor Cyan

$baseUrl = "http://localhost:3001"
$apiUrl = "http://localhost:3006/api/v1/auth/login"

# Test accounts
$accounts = @(
    @{
        Name = "BUYER"
        Email = "buyer@example.com"
        Password = "buyer123"
        ExpectedMenus = @("Dashboard", "Container", "RFQ", "ƒê∆°n h√†ng", "Thanh to√°n", "Gi√°m ƒë·ªãnh", "V·∫≠n chuy·ªÉn", "ƒê√°nh gi√°", "Khi·∫øu n·∫°i", "T√†i kho·∫£n")
        ShouldNotHave = @("B√°n h√†ng", "RFQ & B√°o gi√°", "H√≥a ƒë∆°n")
    },
    @{
        Name = "SELLER"
        Email = "seller@example.com"
        Password = "seller123"
        ExpectedMenus = @("Dashboard", "Container", "B√°n h√†ng", "RFQ & B√°o gi√°", "ƒê∆°n h√†ng", "V·∫≠n chuy·ªÉn", "ƒê√°nh gi√°", "H√≥a ƒë∆°n", "T√†i kho·∫£n")
        ShouldNotHave = @("Thanh to√°n", "Gi√°m ƒë·ªãnh", "Khi·∫øu n·∫°i")
    }
)

foreach ($account in $accounts) {
    Write-Host "`n`nüìä Testing: $($account.Name) ($($account.Email))" -ForegroundColor Yellow
    Write-Host "-" * 80 -ForegroundColor Gray
    
    try {
        # Login
        Write-Host "üîê Logging in..." -NoNewline
        $loginBody = @{
            email = $account.Email
            password = $account.Password
        } | ConvertTo-Json
        
        $loginResponse = Invoke-WebRequest -Uri $apiUrl `
            -Method POST `
            -Headers @{'Content-Type'='application/json'} `
            -Body $loginBody `
            -UseBasicParsing
        
        $loginData = $loginResponse.Content | ConvertFrom-Json
        $token = $loginData.data.token
        Write-Host " ‚úÖ Success" -ForegroundColor Green
        
        # Decode token to see permissions
        $tokenParts = $token.Split('.')
        if ($tokenParts.Length -ge 2) {
            $payload = $tokenParts[1]
            # Add padding if needed
            while ($payload.Length % 4 -ne 0) {
                $payload += "="
            }
            $decodedBytes = [System.Convert]::FromBase64String($payload)
            $decodedJson = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
            $tokenData = $decodedJson | ConvertFrom-Json
            
            Write-Host "`nüìã Token Data:" -ForegroundColor Cyan
            Write-Host "  Roles: $($tokenData.roles -join ', ')" -ForegroundColor White
            if ($tokenData.permissions) {
                Write-Host "  Permissions: $($tokenData.permissions.Count) total" -ForegroundColor White
                Write-Host "  Permission codes: $($tokenData.permissions[0..5] -join ', ')..." -ForegroundColor Gray
            }
        }
        
        # Test dashboard page to see menu in browser console
        Write-Host "`nüåê Testing dashboard page..." -NoNewline
        $dashboardResponse = Invoke-WebRequest -Uri "$baseUrl/vi/dashboard" `
            -Method GET `
            -Headers @{ 'Cookie' = "accessToken=$token" } `
            -MaximumRedirection 0 `
            -UseBasicParsing `
            -ErrorAction SilentlyContinue
        
        if ($dashboardResponse -and $dashboardResponse.StatusCode -eq 200) {
            Write-Host " ‚úÖ OK (200)" -ForegroundColor Green
        } else {
            $status = $dashboardResponse.StatusCode
            Write-Host " ‚ö†Ô∏è  Status: $status" -ForegroundColor Yellow
        }
        
        # Expected menu analysis
        Write-Host "`n‚úÖ Expected Menus (should appear):" -ForegroundColor Green
        foreach ($menu in $account.ExpectedMenus) {
            Write-Host "   ‚úì $menu" -ForegroundColor Green
        }
        
        Write-Host "`n‚ùå Should NOT Have (should NOT appear):" -ForegroundColor Red
        foreach ($menu in $account.ShouldNotHave) {
            Write-Host "   ‚úó $menu" -ForegroundColor Red
        }
        
        Write-Host "`nüí° Action Required:" -ForegroundColor Yellow
        Write-Host "   1. Open browser: $baseUrl/vi/dashboard" -ForegroundColor White
        Write-Host "   2. Open DevTools Console (F12)" -ForegroundColor White
        Write-Host "   3. Look for menu logs starting with üéØ or üìã" -ForegroundColor White
        Write-Host "   4. Verify menu items match expectations above" -ForegroundColor White
        
    } catch {
        Write-Host " ‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host "`n`nüìù SUMMARY:" -ForegroundColor Cyan
Write-Host "=" * 80 -ForegroundColor Cyan
Write-Host "‚úÖ Menu system ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang PERMISSION-BASED" -ForegroundColor Green
Write-Host "‚úÖ Buyer v√† Seller s·∫Ω t·ª± ƒë·ªông nh·∫≠n menu d·ª±a tr√™n permissions" -ForegroundColor Green
Write-Host "‚úÖ Kh√¥ng c·∫ßn ch·ªânh s·ª≠a database permissions" -ForegroundColor Green
Write-Host "`n‚ÑπÔ∏è  N·∫øu mu·ªën thay ƒë·ªïi menu:" -ForegroundColor Yellow
Write-Host "   - Thay ƒë·ªïi permissions trong database" -ForegroundColor White
Write-Host "   - User login l·∫°i" -ForegroundColor White
Write-Host "   - Menu t·ª± ƒë·ªông c·∫≠p nh·∫≠t" -ForegroundColor White
Write-Host ""
