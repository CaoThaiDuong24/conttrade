// @ts-nocheck
import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import prisma from '../lib/prisma.js';

export default async function usersRoutes(fastify: FastifyInstance) {
  
  // GET /users/me - Get current user info
  fastify.get('/me', {
    preHandler: async (request: FastifyRequest, reply: FastifyReply) => {
      try {
        await request.jwtVerify();
      } catch (err) {
        return reply.status(401).send({ 
          success: false, 
          message: 'Unauthorized' 
        });
      }
    }
  }, async (request: FastifyRequest, reply: FastifyReply) => {
    try {
      const userId = (request.user as any).userId;
      
      console.log('=== GET /users/me ===');
      console.log('User ID from JWT:', userId);

      // Fetch user with roles and permissions
      const user = await prisma.users.findUnique({
        where: { id: userId },
        select: {
          id: true,
          email: true,
          display_name: true,
          phone: true,
          status: true,
          email_verified_at: true,
          phone_verified_at: true,
          created_at: true,
          updated_at: true,
          // Relation name generated by Prisma for user_roles relation
          user_roles_user_roles_user_idTousers: {
            include: {
              roles: {
                select: {
                  id: true,
                  code: true,
                  name: true,
                  description: true,
                  level: true,
                  role_permissions: {
                    include: {
                      permissions: {
                        select: {
                          id: true,
                          code: true,
                          name: true,
                          description: true,
                          category: true,
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          org_users: {
            include: {
              orgs: {
                select: {
                  id: true,
                  name: true,
                  tax_code: true,
                }
              }
            }
          }
        }
      });

      if (!user) {
        return reply.status(404).send({
          success: false,
          message: 'User not found'
        });
      }

      // Check user status
      if (user.status !== 'ACTIVE' && user.status !== 'PENDING_VERIFICATION') {
        return reply.status(403).send({
          success: false,
          message: 'User account is not active'
        });
      }

      // Format roles and permissions
      // Map roles from the Prisma-generated relation field
      const roles = (user.user_roles_user_roles_user_idTousers || []).map(ur => ({
        id: ur.roles.id,
        code: ur.roles.code,
        name: ur.roles.name,
        description: ur.roles.description,
        level: ur.roles.level,
        permissions: (ur.roles.role_permissions || []).map(rp => ({
          id: rp.permissions.id,
          code: rp.permissions.code,
          name: rp.permissions.name,
          description: rp.permissions.description,
          category: rp.permissions.category,
        }))
      }));

      // Format organizations
      const organizations = user.org_users.map(ou => ({
        id: ou.orgs.id,
        name: ou.orgs.name,
        taxCode: ou.orgs.tax_code,
        roleInOrg: ou.role_in_org,
      }));

      // Build response
      const userData = {
        id: user.id,
        email: user.email,
        displayName: user.display_name,
        phone: user.phone,
        status: user.status,
        emailVerified: user.email_verified_at !== null,
        phoneVerified: user.phone_verified_at !== null,
        emailVerifiedAt: user.email_verified_at,
        phoneVerifiedAt: user.phone_verified_at,
        createdAt: user.created_at,
        updatedAt: user.updated_at,
        roles: roles,
        organizations: organizations,
        // Quick access to role codes
        roleCodes: roles.map(r => r.code),
        // Quick access to permission codes
        permissionCodes: roles.flatMap(r => r.permissions.map(p => p.code)),
      };

      console.log('✅ User found:', userData.email);
      console.log('Roles:', userData.roleCodes);
      console.log('======================');

      return reply.send({
        success: true,
        data: userData
      });

    } catch (error: any) {
      fastify.log.error('Error fetching user:', error);
      return reply.status(500).send({
        success: false,
        message: 'Failed to fetch user information',
        error: error.message
      });
    }
  });

  // GET /users/:id - Get user by ID (for viewing profiles)
  fastify.get('/:id', {
    preHandler: async (request: FastifyRequest, reply: FastifyReply) => {
      try {
        await request.jwtVerify();
      } catch (err) {
        return reply.status(401).send({ 
          success: false, 
          message: 'Unauthorized' 
        });
      }
    }
  }, async (request: FastifyRequest<{ Params: { id: string } }>, reply: FastifyReply) => {
    try {
      const { id } = request.params;
      const currentUserId = (request.user as any).userId;

      console.log('=== GET /users/:id ===');
      console.log('Requested User ID:', id);
      console.log('Current User ID:', currentUserId);

      // Fetch public user info (limited data for privacy)
      const user = await prisma.users.findUnique({
        where: { id },
        select: {
          id: true,
          email: true,
          display_name: true,
          status: true,
          created_at: true,
          // Only show sensitive data if it's the current user
          ...(id === currentUserId ? {
            phone: true,
            email_verified_at: true,
            phone_verified_at: true,
          } : {})
        }
      });

      if (!user) {
        return reply.status(404).send({
          success: false,
          message: 'User not found'
        });
      }

      if (user.status !== 'ACTIVE' && user.status !== 'PENDING_VERIFICATION') {
        return reply.status(403).send({
          success: false,
          message: 'User account is not active'
        });
      }

      console.log('✅ User found:', user.display_name);
      console.log('======================');

      return reply.send({
        success: true,
        data: user
      });

    } catch (error: any) {
      fastify.log.error('Error fetching user:', error);
      return reply.status(500).send({
        success: false,
        message: 'Failed to fetch user information',
        error: error.message
      });
    }
  });
}
