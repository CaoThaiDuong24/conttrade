services:
  postgres:
    image: postgres:15-alpine
    container_name: conttrade-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: conttrade-db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - conttrade-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: conttrade-backend
    restart: unless-stopped
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: production
      PORT: 3006
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DATABASE: conttrade-db
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/conttrade-db
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-key-change-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      UPLOAD_DIR: ./uploads
      MAX_FILE_SIZE: 10485760
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret-change-in-production}
    volumes:
      - ./uploads:/app/uploads
      - ./environment.env:/app/environment.env:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - conttrade-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3006/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local

networks:
  conttrade-network:
    driver: bridge
