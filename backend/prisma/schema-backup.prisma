// Complete Business Database Schema for i-ContExchange
// Includes all business models for 120+ screens

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// RBAC SYSTEM (EXISTING)
// =============================================

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  phone           String?  @unique
  password        String
  fullName        String?
  displayName     String?
  avatar          String?
  status          UserStatus @default(ACTIVE)
  emailVerified   Boolean  @default(false)
  phoneVerified   Boolean  @default(false)
  
  // KYC/KYB Status
  kycStatus       KYCStatus @default(UNVERIFIED)
  kycData         Json?
  
  // Security
  lastLoginAt     DateTime?
  loginCount      Int      @default(0)
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // RBAC Relations
  userRoles       UserRole[]
  userPermissions UserPermission[]
  sessions        UserSession[]
  loginLogs       LoginLog[]
  orgUsers        OrgUser[]
  
  // Business Relations
  listings        Listing[]
  orders          Order[]
  orderItems      OrderItem[] @relation("UserOrderItems")
  reviews         Review[]
  rfqs            RFQ[] @relation("RFQBuyer")
  quotes          Quote[]
  disputes        Dispute[]
  inspectionReports InspectionReport[]
  invoices        Invoice[] @relation("InvoiceUsers")
  payments        Payment[] @relation("PaymentUsers")
  notifications   Notification[]
  documents       Document[]
  
  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  level       Int      @default(0)
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userRoles   UserRole[]
  rolePermissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  module      String
  action      String
  resource    String?
  
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  
  @@unique([module, action, resource])
  @@map("permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  
  assignedAt DateTime @default(now())
  assignedBy String?
  expiresAt  DateTime?
  isActive   Boolean  @default(true)
  
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  
  grantedAt    DateTime @default(now())
  grantedBy    String?
  isActive     Boolean  @default(true)
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  
  grantedAt    DateTime @default(now())
  grantedBy    String?
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  success   Boolean
  ipAddress String?
  userAgent String?
  reason    String?
  
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("login_logs")
}

model Organization {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  type         OrgType
  status       OrgStatus @default(ACTIVE)
  
  // Business Info
  taxId        String?
  address      String?
  phone        String?
  email        String?
  website      String?
  
  // KYB Status
  kybStatus    KYBStatus @default(UNVERIFIED)
  kybData      Json?
  
  // Tracking
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  orgUsers     OrgUser[]
  depots       Depot[]
  listings     Listing[]
  
  @@map("organizations")
}

model OrgUser {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  roleInOrg String
  
  permissions  String[]
  
  status       OrgUserStatus @default(ACTIVE)
  joinedAt     DateTime @default(now())
  leftAt       DateTime?
  
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  @@unique([userId, orgId])
  @@map("org_users")
}

// =============================================
// CONTAINER BUSINESS MODELS
// =============================================

model Container {
  id              String   @id @default(cuid())
  containerNumber String   @unique // Container unique identifier
  
  // Container Details
  type            ContainerType
  size            ContainerSize
  condition       ContainerCondition
  manufactureYear Int?
  manufacturer    String?
  
  // Technical Specs
  lengthMm        Int
  widthMm         Int
  heightMm        Int
  tareWeightKg    Int
  maxWeightKg     Int
  
  // Current Status
  status          ContainerStatus @default(AVAILABLE)
  location        String?
  depot           String?
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  listings        Listing[]
  orderItems      OrderItem[]
  inspectionReports InspectionReport[]
  movementHistory ContainerMovement[]
  depotInventory  DepotInventory[]
  
  @@map("containers")
}

model Listing {
  id              String   @id @default(cuid())
  title           String
  description     String?
  
  // Container Info
  containerId     String?
  containerType   ContainerType
  containerSize   ContainerSize
  quantity        Int      @default(1)
  condition       ContainerCondition
  
  // Pricing
  price           Decimal
  currency        String   @default("USD")
  priceType       PriceType @default(FIXED)
  minOrder        Int      @default(1)
  
  // Location
  location        String
  depot           String?
  coordinates     String?
  
  // Status
  status          ListingStatus @default(ACTIVE)
  featured        Boolean  @default(false)
  views           Int      @default(0)
  
  // Seller Info
  sellerId        String
  organizationId  String?
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiresAt       DateTime?
  
  // Relations
  seller          User @relation(fields: [sellerId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  container       Container? @relation(fields: [containerId], references: [id])
  orderItems      OrderItem[]
  rfqs            RFQ[] @relation("RFQListings")
  images          ListingImage[]
  reviews         Review[]
  
  @@map("listings")
}

model ListingImage {
  id        String   @id @default(cuid())
  listingId String
  url       String
  caption   String?
  order     Int      @default(0)
  
  createdAt DateTime @default(now())
  
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@map("listing_images")
}

model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  
  // Buyer Info
  buyerId         String
  
  // Order Details
  totalAmount     Decimal
  currency        String   @default("USD")
  status          OrderStatus @default(PENDING)
  
  // Delivery
  deliveryAddress String
  deliveryDate    DateTime?
  deliveryMethod  DeliveryMethod
  
  // Payment
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod?
  
  // Notes
  notes           String?
  internalNotes   String?
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  confirmedAt     DateTime?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  buyer           User @relation(fields: [buyerId], references: [id])
  orderItems      OrderItem[]
  invoices        Invoice[]
  payments        Payment[]
  disputes        Dispute[]
  documents       Document[]
  
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  listingId   String
  containerId String?
  userId      String // Added for proper relation
  
  // Item Details
  quantity    Int
  unitPrice   Decimal
  totalPrice  Decimal
  
  // Status
  status      OrderItemStatus @default(PENDING)
  
  // Tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  listing     Listing @relation(fields: [listingId], references: [id])
  container   Container? @relation(fields: [containerId], references: [id])
  user        User @relation("UserOrderItems", fields: [userId], references: [id])
  
  @@map("order_items")
}

model RFQ {
  id              String   @id @default(cuid())
  rfqNumber       String   @unique
  
  // Buyer Info
  buyerId         String
  listingId       String? // Added for proper relation
  
  // Requirements
  containerType   ContainerType
  containerSize   ContainerSize
  quantity        Int
  condition       ContainerCondition
  
  // Delivery
  deliveryLocation String
  deliveryDate     DateTime?
  
  // RFQ Details
  description     String?
  budgetMin       Decimal?
  budgetMax       Decimal?
  currency        String   @default("USD")
  
  // Status
  status          RFQStatus @default(OPEN)
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiresAt       DateTime
  
  // Relations
  buyer           User @relation("RFQBuyer", fields: [buyerId], references: [id])
  listing         Listing? @relation("RFQListings", fields: [listingId], references: [id])
  quotes          Quote[]
  
  @@map("rfqs")
}

model Quote {
  id          String   @id @default(cuid())
  rfqId       String
  sellerId    String
  
  // Quote Details
  price       Decimal
  currency    String   @default("USD")
  quantity    Int
  
  // Terms
  deliveryDays Int?
  paymentTerms String?
  notes       String?
  
  // Status
  status      QuoteStatus @default(PENDING)
  
  // Tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  validUntil  DateTime
  
  // Relations
  rfq         RFQ @relation(fields: [rfqId], references: [id], onDelete: Cascade)
  seller      User @relation(fields: [sellerId], references: [id])
  
  @@map("quotes")
}

// =============================================
// DEPOT & INVENTORY MANAGEMENT
// =============================================

model Depot {
  id              String   @id @default(cuid())
  name            String
  code            String   @unique
  
  // Location
  address         String
  city            String
  country         String
  coordinates     String?
  
  // Details
  organizationId  String
  capacity        Int      // Total container capacity
  currentOccupancy Int     @default(0)
  
  // Features
  features        String[] // crane, reefer, etc.
  operatingHours  String?
  contactInfo     Json?
  
  // Status
  status          DepotStatus @default(ACTIVE)
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  inventory       DepotInventory[]
  movements       ContainerMovement[]
  
  @@map("depots")
}

model DepotInventory {
  id              String   @id @default(cuid())
  depotId         String
  containerId     String
  
  // Position
  yardPosition    String   // A1, B2, etc.
  stackLevel      Int      @default(1)
  section         String?
  
  // Status
  status          InventoryStatus @default(STORED)
  condition       ContainerCondition
  
  // Tracking
  arrivedAt       DateTime @default(now())
  lastInspected   DateTime?
  scheduledOut    DateTime?
  
  // Relations
  depot           Depot @relation(fields: [depotId], references: [id])
  container       Container @relation(fields: [containerId], references: [id])
  
  @@unique([depotId, containerId])
  @@map("depot_inventory")
}

model ContainerMovement {
  id              String   @id @default(cuid())
  containerId     String
  
  // Movement Details
  movementType    MovementType
  fromLocation    String?
  toLocation      String?
  depotId         String?
  
  // Transportation
  transportMethod TransportMethod?
  vehicleInfo     String?
  driverInfo      String?
  
  // Timing
  scheduledAt     DateTime
  startedAt       DateTime?
  completedAt     DateTime?
  
  // Status
  status          MovementStatus @default(PLANNED)
  
  // Notes
  notes           String?
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  container       Container @relation(fields: [containerId], references: [id])
  depot           Depot? @relation(fields: [depotId], references: [id])
  
  @@map("container_movements")
}

// =============================================
// INSPECTION & QUALITY CONTROL
// =============================================

model InspectionReport {
  id              String   @id @default(cuid())
  reportNumber    String   @unique
  
  // Container & Inspector
  containerId     String
  inspectorId     String
  
  // Inspection Details
  inspectionType  InspectionType
  inspectionDate  DateTime
  location        String
  
  // Results
  overallGrade    InspectionGrade
  structuralGrade InspectionGrade?
  cleanlinessGrade InspectionGrade?
  
  // Findings
  findings        Json     // Detailed findings
  defects         String[] // List of defects
  recommendations String?
  
  // Certification
  certified       Boolean  @default(false)
  validUntil      DateTime?
  certificateNumber String?
  
  // Status
  status          InspectionStatus @default(DRAFT)
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  approvedAt      DateTime?
  approvedBy      String?
  
  // Relations
  container       Container @relation(fields: [containerId], references: [id])
  inspector       User @relation(fields: [inspectorId], references: [id])
  images          InspectionImage[]
  
  @@map("inspection_reports")
}

model InspectionImage {
  id            String   @id @default(cuid())
  reportId      String
  url           String
  caption       String?
  category      String   // exterior, interior, defect, etc.
  order         Int      @default(0)
  
  createdAt     DateTime @default(now())
  
  report        InspectionReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@map("inspection_images")
}

// =============================================
// FINANCIAL MANAGEMENT
// =============================================

model Invoice {
  id              String   @id @default(cuid())
  invoiceNumber   String   @unique
  
  // Order Reference
  orderId         String
  userId          String // Added for proper relation
  
  // Financial Details
  subtotal        Decimal
  taxAmount       Decimal  @default(0)
  totalAmount     Decimal
  currency        String   @default("USD")
  
  // Status
  status          InvoiceStatus @default(DRAFT)
  
  // Dates
  issueDate       DateTime @default(now())
  dueDate         DateTime
  paidDate        DateTime?
  
  // Payment
  paymentTerms    String?
  notes           String?
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  order           Order @relation(fields: [orderId], references: [id])
  user            User @relation("InvoiceUsers", fields: [userId], references: [id])
  payments        Payment[]
  
  @@map("invoices")
}

model Payment {
  id              String   @id @default(cuid())
  paymentNumber   String   @unique
  
  // References
  orderId         String
  invoiceId       String?
  userId          String // Added for proper relation
  
  // Payment Details
  amount          Decimal
  currency        String   @default("USD")
  method          PaymentMethod
  
  // Payment Info
  transactionId   String?
  gateway         String?
  gatewayResponse Json?
  
  // Status
  status          PaymentStatus @default(PENDING)
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  processedAt     DateTime?
  
  // Relations
  order           Order @relation(fields: [orderId], references: [id])
  invoice         Invoice? @relation(fields: [invoiceId], references: [id])
  user            User @relation("PaymentUsers", fields: [userId], references: [id])
  
  @@map("payments")
}

// =============================================
// COMMUNICATION & SUPPORT
// =============================================

model Dispute {
  id              String   @id @default(cuid())
  disputeNumber   String   @unique
  
  // References
  orderId         String
  raisedBy        String
  
  // Dispute Details
  category        DisputeCategory
  subject         String
  description     String
  
  // Status
  status          DisputeStatus @default(OPEN)
  priority        DisputePriority @default(MEDIUM)
  
  // Resolution
  resolution      String?
  resolvedBy      String?
  resolvedAt      DateTime?
  
  // Tracking
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  order           Order @relation(fields: [orderId], references: [id])
  user            User @relation(fields: [raisedBy], references: [id])
  
  @@map("disputes")
}

model Review {
  id          String   @id @default(cuid())
  
  // References
  listingId   String
  reviewerId  String
  orderId     String?
  
  // Review Details
  rating      Int      // 1-5 stars
  title       String?
  comment     String?
  
  // Status
  status      ReviewStatus @default(PUBLISHED)
  
  // Tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  listing     Listing @relation(fields: [listingId], references: [id])
  reviewer    User @relation(fields: [reviewerId], references: [id])
  
  @@map("reviews")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  
  // Notification Details
  type        NotificationType
  title       String
  message     String
  data        Json?    // Additional data
  
  // Status
  read        Boolean  @default(false)
  readAt      DateTime?
  
  // Tracking
  createdAt   DateTime @default(now())
  
  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Document {
  id          String   @id @default(cuid())
  
  // References
  orderId     String?
  userId      String
  
  // Document Details
  type        DocumentType
  name        String
  url         String
  size        Int?
  mimeType    String?
  
  // Status
  status      DocumentStatus @default(ACTIVE)
  
  // Tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  order       Order? @relation(fields: [orderId], references: [id])
  user        User @relation(fields: [userId], references: [id])
  
  @@map("documents")
}

// =============================================
// ENUMS
// =============================================

// User Status
enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
}

enum KYCStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum KYBStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

// Organization
enum OrgType {
  SHIPPING_LINE
  FREIGHT_FORWARDER
  DEPOT
  TRADING_COMPANY
  INSPECTION_AGENCY
  LOGISTICS_PROVIDER
  GOVERNMENT
  INDIVIDUAL
  OTHER
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum OrgUserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  LEFT
}

// Container
enum ContainerType {
  DRY_VAN
  REEFER
  OPEN_TOP
  FLAT_RACK
  TANK
  PLATFORM
  BULK
}

enum ContainerSize {
  TWENTY_FT
  FORTY_FT
  FORTY_FIVE_FT
  FIFTY_THREE_FT
  HIGH_CUBE_40
  HIGH_CUBE_45
}

enum ContainerCondition {
  GRADE_A
  GRADE_B
  GRADE_C
  GRADE_D
  AS_IS
  WWT
  IICL
  CW
}

enum ContainerStatus {
  AVAILABLE
  RESERVED
  SOLD
  IN_TRANSIT
  UNDER_REPAIR
  SCRAPPED
  UNKNOWN
}

// Listing
enum PriceType {
  FIXED
  NEGOTIABLE
  AUCTION
  REQUEST_QUOTE
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PAUSED
  SOLD
  EXPIRED
  REMOVED
}

// Order
enum OrderStatus {
  PENDING
  CONFIRMED
  PAYMENT_PENDING
  PAID
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  DISPUTED
}

enum OrderItemStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
  SHIPPING
  RAIL
  BARGE
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  LETTER_OF_CREDIT
  CASH_ON_DELIVERY
  CRYPTO
  ESCROW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIAL
}

// RFQ & Quote
enum RFQStatus {
  OPEN
  CLOSED
  AWARDED
  EXPIRED
  CANCELLED
}

enum QuoteStatus {
  PENDING
  SUBMITTED
  ACCEPTED
  REJECTED
  EXPIRED
  WITHDRAWN
}

// Depot
enum DepotStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FULL
}

enum InventoryStatus {
  STORED
  RESERVED
  IN_TRANSIT
  BEING_LOADED
  BEING_UNLOADED
  UNDER_INSPECTION
}

// Movement
enum MovementType {
  GATE_IN
  GATE_OUT
  REPOSITION
  LOADING
  UNLOADING
  TRANSFER
  INSPECTION
}

enum TransportMethod {
  TRUCK
  RAIL
  BARGE
  SHIP
  INTERNAL
}

enum MovementStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
}

// Inspection
enum InspectionType {
  PRE_TRIP
  ON_HIRE
  OFF_HIRE
  PERIODIC
  DAMAGE
  REPAIR
  CERTIFICATION
}

enum InspectionGrade {
  EXCELLENT
  GOOD
  FAIR
  POOR
  FAILED
}

enum InspectionStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

// Financial
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

// Communication
enum DisputeCategory {
  QUALITY
  DELIVERY
  PAYMENT
  DOCUMENTATION
  DAMAGE
  OTHER
}

enum DisputeStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReviewStatus {
  DRAFT
  PUBLISHED
  HIDDEN
  DELETED
}

enum NotificationType {
  ORDER_UPDATE
  PAYMENT_UPDATE
  DELIVERY_UPDATE
  INSPECTION_UPDATE
  DISPUTE_UPDATE
  SYSTEM_ALERT
  PROMOTION
  REMINDER
}

enum DocumentType {
  INVOICE
  BILL_OF_LADING
  INSPECTION_REPORT
  CERTIFICATE
  CONTRACT
  RECEIPT
  INSURANCE
  CUSTOMS
  OTHER
}

enum DocumentStatus {
  ACTIVE
  ARCHIVED
  DELETED
}