generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model containers {
  id                    String                  @id
  iso_code              String
  size_ft               Int
  type                  ContainerType
  serial_no             String                  @unique
  owner_org_id          String?
  current_depot_id      String?
  condition             ContainerCondition
  quality_standard      QualityStandard
  csc_plate_no          String?
  manufactured_year     Int?
  last_inspection_date  DateTime?
  last_repair_date      DateTime?
  status                ContainerStatus         @default(AVAILABLE)
  created_at            DateTime                @default(now())
  updated_at            DateTime
  deleted_at            DateTime?
  depots                depots?                 @relation(fields: [current_depot_id], references: [id])
  orgs                  orgs?                   @relation(fields: [owner_org_id], references: [id])
  depot_stock_movements depot_stock_movements[]
  listings              listings[]
}

model deliveries {
  id                     String            @id
  order_id               String
  pickup_depot_id        String?
  dropoff_address        String
  dropoff_contact        Json?
  schedule_at            DateTime?
  carrierId              String?
  carrier_name           String?
  tracking_number        String?
  status                 DeliveryStatus    @default(PENDING)
  gps_tracking_id        String?
  estimated_delivery     DateTime?
  actual_delivery        DateTime?
  delivery_notes         String?
  created_at             DateTime          @default(now())
  updated_at             DateTime
  booked_at              DateTime?
  current_location       String?
  delivered_at           DateTime?
  delivery_address       String?
  delivery_contact       String?
  delivery_date          DateTime?
  delivery_phone         String?
  delivery_time          String?
  eir_data               Json?
  in_transit_at          DateTime?
  needs_crane            Boolean           @default(false)
  notes                  String?
  special_instructions   String?
  transportation_fee     Decimal?
  carrier_contact_json   Json?
  transport_method       String?           @db.VarChar(50)
  route_json             Json?
  driver_info_json       Json?
  delivery_location_json Json?
  delivery_proof_json    Json?
  eir_data_json          Json?
  received_by_name       String?           @db.VarChar(255)
  received_by_signature  String?
  driver_notes           String?
  delivery_method        DeliveryMethod    @default(logistics)
  logistics_company      String?
  receipt_confirmed_at   DateTime?         @db.Timestamp(6)
  receipt_data_json      Json?
  orders                 orders            @relation(fields: [order_id], references: [id])
  depots                 depots?           @relation(fields: [pickup_depot_id], references: [id])
  delivery_events        delivery_events[]
}

model delivery_events {
  id          String            @id
  delivery_id String
  event_type  DeliveryEventType
  payload     Json?
  location    Json?
  occurred_at DateTime          @default(now())
  created_at  DateTime          @default(now())
  deliveries  deliveries        @relation(fields: [delivery_id], references: [id], onDelete: Cascade)
}

model depot_users {
  id            String      @id
  depot_id      String
  user_id       String
  role_in_depot RoleInDepot
  permissions   Json?
  assigned_at   DateTime    @default(now())
  created_at    DateTime    @default(now())
  updated_at    DateTime
  depots        depots      @relation(fields: [depot_id], references: [id], onDelete: Cascade)
  users         users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([depot_id, user_id])
}

model depots {
  id                    String                  @id
  name                  String
  code                  String                  @unique
  address               String?
  province              String?
  city                  String?
  geo_point             String?
  capacity_teu          Int?
  contact               Json?
  operating_hours       Json?
  services              Json?
  status                DepotStatus             @default(ACTIVE)
  created_at            DateTime                @default(now())
  updated_at            DateTime
  deleted_at            DateTime?
  containers            containers[]
  deliveries            deliveries[]
  depot_calendars       depot_calendars[]
  depot_stock_movements depot_stock_movements[]
  depot_users           depot_users[]
  inspections           inspections[]
  listings              listings[]
  repairs               repairs[]
}

model dispute_evidence {
  id          String   @id
  dispute_id  String
  uploader_id String
  file_url    String
  file_type   String?
  note        String?
  created_at  DateTime @default(now())
  disputes    disputes @relation(fields: [dispute_id], references: [id], onDelete: Cascade)
  users       users    @relation(fields: [uploader_id], references: [id])
}

model disputes {
  id                                String               @id
  order_id                          String
  raised_by                         String
  status                            DisputeStatus        @default(OPEN)
  reason                            String
  description                       String?
  resolution                        String?
  resolved_by                       String?
  resolved_at                       DateTime?
  closed_at                         DateTime?
  created_at                        DateTime             @default(now())
  updated_at                        DateTime
  assigned_to                       String?
  evidence_json                     Json?
  requested_resolution              String?              @db.VarChar(100)
  requested_amount                  Decimal?             @db.Decimal(15, 2)
  admin_notes                       String?
  resolution_notes                  String?
  resolution_amount                 Decimal?             @db.Decimal(15, 2)
  priority                          String?              @default("MEDIUM") @db.VarChar(20)
  responded_at                      DateTime?            @db.Timestamptz(6)
  escalated_at                      DateTime?            @db.Timestamptz(6)
  dispute_audit_logs                dispute_audit_logs[]
  dispute_evidence                  dispute_evidence[]
  dispute_messages                  dispute_messages[]
  users_disputes_raised_byTousers   users                @relation("disputes_raised_byTousers", fields: [raised_by], references: [id], map: "disputes_opened_by_fkey")
  orders                            orders               @relation(fields: [order_id], references: [id])
  users_disputes_resolved_byTousers users?               @relation("disputes_resolved_byTousers", fields: [resolved_by], references: [id])

  @@index([assigned_to], map: "idx_disputes_assigned_to")
  @@index([created_at(sort: Desc)], map: "idx_disputes_created_at")
  @@index([order_id], map: "idx_disputes_order_id")
  @@index([priority], map: "idx_disputes_priority")
  @@index([status], map: "idx_disputes_status")
}

model dispute_messages {
  id               String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  dispute_id       String
  sender_id        String
  message          String
  attachments_json Json?
  is_internal      Boolean?  @default(false)
  is_resolution    Boolean?  @default(false)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  read_at          DateTime? @db.Timestamptz(6)
  disputes         disputes  @relation(fields: [dispute_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dispute_message_dispute")
  users            users     @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dispute_message_sender")

  @@index([created_at], map: "idx_dispute_messages_created_at")
  @@index([dispute_id], map: "idx_dispute_messages_dispute_id")
  @@index([sender_id], map: "idx_dispute_messages_sender_id")
}

model dispute_audit_logs {
  id            String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  dispute_id    String
  user_id       String
  action        String   @db.VarChar(50)
  old_value     String?
  new_value     String?
  metadata_json Json?
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  disputes      disputes @relation(fields: [dispute_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dispute_audit_dispute")
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dispute_audit_user")

  @@index([created_at(sort: Desc)], map: "idx_dispute_audit_created_at")
  @@index([dispute_id], map: "idx_dispute_audit_dispute_id")
}

model order_preparations {
  id                             String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  order_id                       String
  seller_id                      String
  preparation_started_at         DateTime  @default(now()) @db.Timestamptz(6)
  preparation_completed_at       DateTime? @db.Timestamptz(6)
  estimated_ready_date           DateTime? @db.Timestamptz(6)
  container_inspection_completed Boolean?  @default(false)
  container_cleaned              Boolean?  @default(false)
  container_repaired             Boolean?  @default(false)
  documents_prepared             Boolean?  @default(false)
  customs_cleared                Boolean?  @default(false)
  inspection_photos_json         Json?
  repair_photos_json             Json?
  document_urls_json             Json?
  preparation_notes              String?
  seller_notes                   String?
  pickup_location_json           Json?
  pickup_contact_name            String?   @db.VarChar(255)
  pickup_contact_phone           String?   @db.VarChar(50)
  pickup_instructions            String?
  pickup_available_from          DateTime? @db.Timestamptz(6)
  pickup_available_to            DateTime? @db.Timestamptz(6)
  status                         String?   @default("PREPARING") @db.VarChar(50)
  created_at                     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime  @default(now()) @db.Timestamptz(6)
  orders                         orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_preparation_order")
  users                          users     @relation(fields: [seller_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_preparation_seller")

  @@index([order_id], map: "idx_order_preparations_order_id")
  @@index([estimated_ready_date], map: "idx_order_preparations_ready_date")
  @@index([seller_id], map: "idx_order_preparations_seller_id")
  @@index([status], map: "idx_order_preparations_status")
}

model documents {
  id              String         @id
  order_id        String?
  doc_type        DocumentType
  number          String
  file_url        String
  file_size       Int?
  mime_type       String?
  issued_at       DateTime       @default(now())
  issued_by       String?
  created_at      DateTime       @default(now())
  updated_at      DateTime
  document_number String?
  metadata        Json?
  pickup_code     String?
  status          DocumentStatus @default(DRAFT)
  valid_until     DateTime?
  users           users?         @relation(fields: [issued_by], references: [id])
  orders          orders?        @relation(fields: [order_id], references: [id])
}

model inspection_items {
  id            String      @id
  inspection_id String
  code          String
  name          String
  severity      Severity
  note          String?
  photo_url     String?
  rating        Int?
  created_at    DateTime    @default(now())
  inspections   inspections @relation(fields: [inspection_id], references: [id], onDelete: Cascade)
}

model inspections {
  id                                    String             @id
  listing_id                            String?
  depot_id                              String
  requested_by                          String
  inspector_id                          String?
  status                                InspectionStatus   @default(PENDING)
  standard                              InspectionStandard
  scheduled_at                          DateTime?
  started_at                            DateTime?
  completed_at                          DateTime?
  summary                               String?
  overall_rating                        OverallRating?
  recommendations                       String?
  created_at                            DateTime           @default(now())
  updated_at                            DateTime
  inspection_items                      inspection_items[]
  depots                                depots             @relation(fields: [depot_id], references: [id])
  users_inspections_inspector_idTousers users?             @relation("inspections_inspector_idTousers", fields: [inspector_id], references: [id])
  listings                              listings?          @relation(fields: [listing_id], references: [id])
  users_inspections_requested_byTousers users              @relation("inspections_requested_byTousers", fields: [requested_by], references: [id])
  repairs                               repairs[]
}

model listing_facets {
  id         String   @id
  listing_id String
  key        String
  value      String
  created_at DateTime @default(now())
  listings   listings @relation(fields: [listing_id], references: [id], onDelete: Cascade)

  @@unique([listing_id, key])
}

model listing_media {
  id                String    @id
  listing_id        String
  media_url         String
  media_type        MediaType
  sort_order        Int       @default(0)
  alt_text          String?
  file_size         Int?
  mime_type         String?
  created_at        DateTime  @default(now())
  updated_at        DateTime
  original_filename String?
  uploaded_by       String?
  listings          listings  @relation(fields: [listing_id], references: [id], onDelete: Cascade)
  users             users?    @relation(fields: [uploaded_by], references: [id])
}

model listings {
  id                String           @id
  container_id      String?
  seller_user_id    String
  org_id            String?
  deal_type         DealType
  price_currency    String           @default("VND")
  price_amount      Decimal
  rental_unit       String?
  location_depot_id String?
  status            ListingStatus    @default(DRAFT)
  title             String
  description       String?
  features          Json?
  specifications    Json?
  view_count        Int              @default(0)
  favorite_count    Int              @default(0)
  published_at      DateTime?
  expires_at        DateTime?
  created_at        DateTime         @default(now())
  updated_at        DateTime
  deleted_at        DateTime?
  rejection_reason  String?
  admin_reviewed_by String?          @db.VarChar(255)
  admin_reviewed_at DateTime?        @db.Timestamp(6)
  inspections       inspections[]
  listing_facets    listing_facets[]
  listing_media     listing_media[]
  containers        containers?      @relation(fields: [container_id], references: [id])
  depots            depots?          @relation(fields: [location_depot_id], references: [id])
  orgs              orgs?            @relation(fields: [org_id], references: [id])
  users             users            @relation(fields: [seller_user_id], references: [id])
  orders            orders[]
  rfqs              rfqs[]
}

model md_adjust_reasons {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_business_hours_policies {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_cancel_reasons {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_cities {
  id           String       @id
  province_id  String
  code         String
  name         String
  name_en      String
  created_at   DateTime     @default(now())
  updated_at   DateTime
  md_provinces md_provinces @relation(fields: [province_id], references: [id])
}

model md_commission_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model md_container_sizes {
  id          String   @id
  size_ft     Int
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_container_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_countries {
  id           String         @id
  code         String         @unique
  name         String
  name_en      String
  created_at   DateTime       @default(now())
  updated_at   DateTime
  md_provinces md_provinces[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model md_currencies {
  id             String   @id
  code           String   @unique
  name           String
  symbol         String
  decimal_places Int
  created_at     DateTime @default(now())
  updated_at     DateTime
}

model md_deal_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_delivery_event_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_delivery_statuses {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_dispute_reasons {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_dispute_statuses {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_document_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_feature_flag_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_fee_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_form_schema_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_i18n_namespaces {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_incoterms {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_inspection_item_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_insurance_coverages {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_integration_vendor_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_iso_container_codes {
  id          String   @id
  iso_code    String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_listing_statuses {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model md_movement_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_notification_channels {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_notification_event_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_order_statuses {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_partner_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_payment_failure_reasons {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_payment_method_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_payment_statuses {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_pricing_regions {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_provinces {
  id           String       @id
  country_id   String
  code         String
  name         String
  name_en      String
  created_at   DateTime     @default(now())
  updated_at   DateTime
  md_cities    md_cities[]
  md_countries md_countries @relation(fields: [country_id], references: [id])
}

model md_quality_standards {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model md_rating_scales {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_redaction_channels {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_ref_doc_types {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_rental_units {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_repair_item_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_service_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_sla_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_tax_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_template_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_units {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model md_unlocodes {
  id           String   @id
  code         String   @unique
  name         String
  country_code String
  created_at   DateTime @default(now())
  updated_at   DateTime
}

model md_violation_codes {
  id          String   @id
  code        String   @unique
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model order_items {
  id          String   @id
  order_id    String
  item_type   ItemType
  ref_id      String?
  description String
  qty         Decimal
  unit_price  Decimal
  total_price Decimal
  created_at  DateTime @default(now())
  orders      orders   @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model orders {
  id                            String               @id
  buyer_id                      String
  seller_id                     String
  listing_id                    String?
  quote_id                      String?
  org_ids                       Json?
  status                        OrderStatus          @default(CREATED)
  subtotal                      Decimal
  tax                           Decimal              @default(0)
  fees                          Decimal              @default(0)
  total                         Decimal
  currency                      String               @default("VND")
  order_number                  String               @unique
  notes                         String?
  created_at                    DateTime             @default(now())
  updated_at                    DateTime
  ready_date                    DateTime?            @db.Timestamp(6)
  delivered_at                  DateTime?            @db.Timestamp(6)
  completed_at                  DateTime?            @db.Timestamp(6)
  payment_verified_at           DateTime?
  receipt_confirmed_at          DateTime?            @db.Timestamp(6)
  receipt_confirmed_by          String?
  receipt_data_json             Json?
  deliveries                    deliveries[]
  disputes                      disputes[]
  documents                     documents[]
  order_items                   order_items[]
  order_preparations            order_preparations[]
  users_orders_buyer_idTousers  users                @relation("orders_buyer_idTousers", fields: [buyer_id], references: [id])
  listings                      listings?            @relation(fields: [listing_id], references: [id])
  quotes                        quotes?              @relation(fields: [quote_id], references: [id])
  users_orders_seller_idTousers users                @relation("orders_seller_idTousers", fields: [seller_id], references: [id])
  payments                      payments[]
  reviews                       reviews[]
}

model org_users {
  id          String    @id
  org_id      String
  user_id     String
  role_in_org RoleInOrg
  permissions Json?
  joined_at   DateTime  @default(now())
  created_at  DateTime  @default(now())
  updated_at  DateTime
  orgs        orgs      @relation(fields: [org_id], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([org_id, user_id])
}

model orgs {
  id                  String          @id
  name                String
  tax_code            String?         @unique
  kyb_status          KYBStatus       @default(UNVERIFIED)
  owner_user_id       String
  business_type       String?
  registration_number String?
  address             String?
  province            String?
  contact_person      String?
  contact_phone       String?
  contact_email       String?
  website             String?
  description         String?
  logo_url            String?
  created_at          DateTime        @default(now())
  updated_at          DateTime
  deleted_at          DateTime?
  containers          containers[]
  listings            listings[]
  org_users           org_users[]
  users               users           @relation(fields: [owner_user_id], references: [id])
  subscriptions       subscriptions[]
}

model payments {
  id                 String          @id
  order_id           String
  provider           PaymentProvider
  method             PaymentMethod
  status             PaymentStatus   @default(PENDING)
  escrow_account_ref String?
  amount             Decimal
  currency           String          @default("VND")
  transaction_id     String?
  gateway_response   Json?
  paid_at            DateTime?
  created_at         DateTime        @default(now())
  updated_at         DateTime
  escrow_hold_until  DateTime?
  released_at        DateTime?
  verified_at        DateTime?
  verified_by        String?
  notes              String?
  orders             orders          @relation(fields: [order_id], references: [id])
}

model permissions {
  id               String             @id
  code             String             @unique
  name             String
  description      String?
  category         String?
  created_at       DateTime           @default(now())
  updated_at       DateTime
  role_permissions role_permissions[]
}

model plans {
  id               String          @id
  code             String          @unique
  name             String
  description      String?
  price            Decimal
  currency         String          @default("VND")
  cycle            PlanCycle
  features         Json?
  max_listings     Int?
  max_rfqs         Int?
  priority_support Boolean         @default(false)
  status           String          @default("active")
  created_at       DateTime        @default(now())
  updated_at       DateTime
  subscriptions    subscriptions[]
}

model qa_answers {
  id           String       @id
  question_id  String
  responder_id String
  answer       String
  moderated    Boolean      @default(false)
  moderated_by String?
  moderated_at DateTime?
  created_at   DateTime     @default(now())
  qa_questions qa_questions @relation(fields: [question_id], references: [id], onDelete: Cascade)
  users        users        @relation(fields: [responder_id], references: [id])
}

model qa_questions {
  id           String       @id
  rfq_id       String
  author_id    String
  question     String
  moderated    Boolean      @default(false)
  moderated_by String?
  moderated_at DateTime?
  created_at   DateTime     @default(now())
  qa_answers   qa_answers[]
  users        users        @relation(fields: [author_id], references: [id])
  rfqs         rfqs         @relation(fields: [rfq_id], references: [id], onDelete: Cascade)
}

model quote_items {
  id          String   @id
  quote_id    String
  item_type   ItemType
  ref_id      String?
  description String
  qty         Decimal
  unit_price  Decimal
  total_price Decimal
  created_at  DateTime @default(now())
  quotes      quotes   @relation(fields: [quote_id], references: [id], onDelete: Cascade)
}

model quotes {
  id             String        @id
  rfq_id         String
  seller_id      String
  price_subtotal Decimal
  fees_json      Json?
  total          Decimal
  currency       String        @default("VND")
  valid_until    DateTime?
  status         QuoteStatus   @default(DRAFT)
  notes          String?
  created_at     DateTime      @default(now())
  updated_at     DateTime
  orders         orders[]
  quote_items    quote_items[]
  rfqs           rfqs          @relation(fields: [rfq_id], references: [id], onDelete: Cascade)
  users          users         @relation(fields: [seller_id], references: [id])
}

model repair_items {
  id           String   @id
  repair_id    String
  item_code    String
  description  String
  qty          Decimal
  unit_price   Decimal
  total_price  Decimal
  note         String?
  before_photo String?
  after_photo  String?
  created_at   DateTime @default(now())
  repairs      repairs  @relation(fields: [repair_id], references: [id], onDelete: Cascade)
}

model repairs {
  id            String         @id
  inspection_id String?
  depot_id      String
  quote_amount  Decimal?
  actual_amount Decimal?
  status        RepairStatus   @default(PENDING)
  description   String?
  started_at    DateTime?
  completed_at  DateTime?
  created_at    DateTime       @default(now())
  updated_at    DateTime
  repair_items  repair_items[]
  depots        depots         @relation(fields: [depot_id], references: [id])
  inspections   inspections?   @relation(fields: [inspection_id], references: [id])
}

model reviews {
  id                               String    @id
  order_id                         String
  reviewer_id                      String
  reviewee_id                      String
  rating                           Int
  comment                          String?
  response                         String?
  response_by                      String?
  response_at                      DateTime?
  moderated                        Boolean   @default(false)
  moderated_by                     String?
  moderated_at                     DateTime?
  created_at                       DateTime  @default(now())
  updated_at                       DateTime
  orders                           orders    @relation(fields: [order_id], references: [id])
  users_reviews_response_byTousers users?    @relation("reviews_response_byTousers", fields: [response_by], references: [id])
  users_reviews_reviewee_idTousers users     @relation("reviews_reviewee_idTousers", fields: [reviewee_id], references: [id])
  users_reviews_reviewer_idTousers users     @relation("reviews_reviewer_idTousers", fields: [reviewer_id], references: [id])

  @@unique([order_id, reviewer_id])
}

model rfqs {
  id            String         @id
  listing_id    String?
  buyer_id      String
  purpose       RFQPurpose
  quantity      Int            @default(1)
  need_by       DateTime?
  services_json Json?
  status        RFQStatus      @default(DRAFT)
  submitted_at  DateTime?
  expired_at    DateTime?
  created_at    DateTime       @default(now())
  updated_at    DateTime
  qa_questions  qa_questions[]
  quotes        quotes[]
  users         users          @relation(fields: [buyer_id], references: [id])
  listings      listings?      @relation(fields: [listing_id], references: [id])
}

model role_permissions {
  id            String          @id
  role_id       String
  permission_id String
  scope         PermissionScope @default(GLOBAL)
  created_at    DateTime        @default(now())
  permissions   permissions     @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  roles         roles           @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id, scope])
}

model roles {
  id               String             @id
  code             String             @unique
  name             String
  description      String?
  level            Int                @default(0)
  is_system_role   Boolean            @default(false)
  created_at       DateTime           @default(now())
  updated_at       DateTime
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model settings {
  id          String   @id
  key         String   @unique
  value       Json
  description String?
  category    String?
  is_public   Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model subscriptions {
  id           String             @id
  user_id      String?
  org_id       String?
  plan_id      String
  status       SubscriptionStatus @default(ACTIVE)
  started_at   DateTime           @default(now())
  renewed_at   DateTime?
  expires_at   DateTime?
  cancelled_at DateTime?
  cancelled_by String?
  created_at   DateTime           @default(now())
  updated_at   DateTime
  orgs         orgs?              @relation(fields: [org_id], references: [id])
  plans        plans              @relation(fields: [plan_id], references: [id])
  users        users?             @relation(fields: [user_id], references: [id])
}

model user_roles {
  id                                  String    @id
  user_id                             String
  role_id                             String
  assigned_by                         String?
  assigned_at                         DateTime  @default(now())
  expires_at                          DateTime?
  created_at                          DateTime  @default(now())
  users_user_roles_assigned_byTousers users?    @relation("user_roles_assigned_byTousers", fields: [assigned_by], references: [id])
  roles                               roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users_user_roles_user_idTousers     users     @relation("user_roles_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model users {
  id                                          String               @id
  email                                       String?              @unique
  phone                                       String?              @unique
  password_hash                               String
  status                                      UserStatus           @default(PENDING_VERIFICATION)
  kyc_status                                  KYCStatus            @default(UNVERIFIED)
  display_name                                String?
  first_name                                  String?
  last_name                                   String?
  avatar_url                                  String?
  default_locale                              String               @default("vi")
  timezone                                    String               @default("Asia/Ho_Chi_Minh")
  last_login_at                               DateTime?
  email_verified_at                           DateTime?
  phone_verified_at                           DateTime?
  created_at                                  DateTime             @default(now())
  updated_at                                  DateTime
  deleted_at                                  DateTime?
  audit_logs                                  audit_logs[]
  depot_users                                 depot_users[]
  dispute_audit_logs                          dispute_audit_logs[]
  dispute_evidence                            dispute_evidence[]
  dispute_messages                            dispute_messages[]
  disputes_disputes_raised_byTousers          disputes[]           @relation("disputes_raised_byTousers")
  disputes_disputes_resolved_byTousers        disputes[]           @relation("disputes_resolved_byTousers")
  documents                                   documents[]
  inspections_inspections_inspector_idTousers inspections[]        @relation("inspections_inspector_idTousers")
  inspections_inspections_requested_byTousers inspections[]        @relation("inspections_requested_byTousers")
  listing_media                               listing_media[]
  listings                                    listings[]
  order_preparations                          order_preparations[]
  orders_orders_buyer_idTousers               orders[]             @relation("orders_buyer_idTousers")
  orders_orders_seller_idTousers              orders[]             @relation("orders_seller_idTousers")
  org_users                                   org_users[]
  orgs                                        orgs[]
  qa_answers                                  qa_answers[]
  qa_questions                                qa_questions[]
  quotes                                      quotes[]
  reviews_reviews_response_byTousers          reviews[]            @relation("reviews_response_byTousers")
  reviews_reviews_reviewee_idTousers          reviews[]            @relation("reviews_reviewee_idTousers")
  reviews_reviews_reviewer_idTousers          reviews[]            @relation("reviews_reviewer_idTousers")
  rfqs                                        rfqs[]
  subscriptions                               subscriptions[]
  user_roles_user_roles_assigned_byTousers    user_roles[]         @relation("user_roles_assigned_byTousers")
  user_roles_user_roles_user_idTousers        user_roles[]         @relation("user_roles_user_idTousers")
}

model audit_logs {
  id           String      @id
  actor_id     String?
  action       AuditAction
  target_table String
  target_id    String?
  meta         Json?
  created_at   DateTime    @default(now())
  users        users?      @relation(fields: [actor_id], references: [id])
}

model business_hours {
  id            String   @id
  org_id        String?
  timezone      String
  schedule_json Json
  created_at    DateTime @default(now())
  updated_at    DateTime
}

model commission_rules {
  id              String               @id
  rule_code       String
  name            String
  basis           String
  percent         Decimal
  min_amount      Decimal?
  max_amount      Decimal?
  conditions_json Json?
  effective_from  DateTime
  effective_to    DateTime?
  status          CommissionRuleStatus @default(ACTIVE)
  created_at      DateTime             @default(now())
  updated_at      DateTime
}

model config_entries {
  id                String            @id
  namespace_id      String
  key               String
  version           Int               @default(1)
  status            ConfigEntryStatus @default(DRAFT)
  value_json        Json
  checksum          String?
  created_by        String?
  published_by      String?
  created_at        DateTime          @default(now())
  updated_at        DateTime
  config_namespaces config_namespaces @relation(fields: [namespace_id], references: [id])

  @@unique([namespace_id, key, version])
}

model config_namespaces {
  id             String           @id
  code           String           @unique
  name           String
  description    String?
  created_at     DateTime         @default(now())
  updated_at     DateTime
  config_entries config_entries[]
}

model depot_calendars {
  id                String   @id
  depot_id          String
  closed_dates_json Json?
  notes             String?
  created_at        DateTime @default(now())
  updated_at        DateTime
  depots            depots   @relation(fields: [depot_id], references: [id])
}

model depot_stock_movements {
  id            String            @id
  depot_id      String
  container_id  String?
  owner_org_id  String?
  movement_type MovementType
  direction     MovementDirection
  ref_doc_type  RefDocType
  ref_doc_id    String?
  reason        String?
  occurred_at   DateTime
  created_by    String?
  created_at    DateTime          @default(now())
  containers    containers?       @relation(fields: [container_id], references: [id])
  depots        depots            @relation(fields: [depot_id], references: [id])
}

model feature_flags {
  id             String            @id
  code           String            @unique
  name           String
  description    String?
  enabled        Boolean           @default(false)
  rollout_json   Json?
  effective_from DateTime?
  effective_to   DateTime?
  version        Int               @default(1)
  status         FeatureFlagStatus @default(DRAFT)
  created_at     DateTime          @default(now())
  updated_at     DateTime
}

model fee_schedules {
  id             String            @id
  fee_code       String
  name           String
  calc_type      String
  currency       String
  amount         Decimal?
  percent        Decimal?
  tiers_json     Json?
  scope          String
  effective_from DateTime
  effective_to   DateTime?
  status         FeeScheduleStatus @default(ACTIVE)
  created_at     DateTime          @default(now())
  updated_at     DateTime
}

model form_schemas {
  id          String           @id
  code        String           @unique
  name        String
  scope       String
  json_schema Json
  ui_schema   Json?
  version     Int              @default(1)
  status      FormSchemaStatus @default(DRAFT)
  created_at  DateTime         @default(now())
  updated_at  DateTime
}

model i18n_translations {
  id         String   @id
  namespace  String
  key        String
  locale     String
  value      String
  created_at DateTime @default(now())
  updated_at DateTime

  @@unique([namespace, key, locale])
}

model integration_configs {
  id          String            @id
  vendor_code String
  name        String
  config_json Json
  secrets_ref String?
  version     Int               @default(1)
  status      IntegrationStatus @default(ACTIVE)
  created_at  DateTime          @default(now())
  updated_at  DateTime
}

model marketplace_policies {
  id             String       @id
  policy_code    String
  name           String
  content_md     String
  effective_from DateTime
  effective_to   DateTime?
  version        Int          @default(1)
  status         PolicyStatus @default(DRAFT)
  created_at     DateTime     @default(now())
  updated_at     DateTime
}

model notification_templates {
  id             String              @id
  channel        NotificationChannel
  template_code  String
  locale         String
  subject        String?
  body_md        String
  variables_json Json?
  version        Int                 @default(1)
  status         TemplateStatus      @default(DRAFT)
  created_at     DateTime            @default(now())
  updated_at     DateTime
}

model partners {
  id           String        @id
  type         PartnerType
  name         String
  contact_json Json
  status       PartnerStatus @default(ACTIVE)
  created_at   DateTime      @default(now())
  updated_at   DateTime
}

model payment_methods {
  id          String   @id
  code        String   @unique
  provider    String
  method_type String
  enabled     Boolean  @default(true)
  config_json Json
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model redaction_patterns {
  id          String   @id
  code        String   @unique
  pattern     String
  description String?
  channel     String
  enabled     Boolean  @default(true)
  severity    String
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model tax_rates {
  id             String        @id
  region         String
  tax_code       String
  rate           Decimal
  effective_from DateTime
  effective_to   DateTime?
  status         TaxRateStatus @default(ACTIVE)
  created_at     DateTime      @default(now())
  updated_at     DateTime
}

model notifications {
  id         String    @id @db.VarChar(255)
  user_id    String    @db.VarChar(255)
  type       String    @db.VarChar(50)
  title      String    @db.VarChar(255)
  message    String
  data       Json?
  read       Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)

  @@index([created_at], map: "idx_notifications_created_at")
  @@index([read], map: "idx_notifications_read")
  @@index([type], map: "idx_notifications_type")
  @@index([user_id], map: "idx_notifications_user_id")
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
}

enum CommissionRuleStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ConfigEntryStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContainerCondition {
  CW
  WWT
  IICL
}

enum ContainerStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  SOLD
  SCRAPPED
}

enum ContainerType {
  DRY
  HC
  RF
  OT
  TANK
  FLAT
}

enum DealType {
  SALE
  RENTAL
}

enum DeliveryEventType {
  CREATED
  SCHEDULED
  PICKED_UP
  IN_TRANSIT
  DELAYED
  DELIVERED
  FAILED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  SCHEDULED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}

enum DepotStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum DisputeStatus {
  OPEN
  INVESTIGATING
  RESOLVED
  CLOSED
  ESCALATED
}

enum DocumentType {
  EDO
  EIR
  INVOICE
  RECEIPT
  CONTRACT
  OTHER
}

enum DocumentStatus {
  DRAFT
  ISSUED
  EXPIRED
  CANCELLED
}

enum FeatureFlagStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum FeeScheduleStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum FormSchemaStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum InspectionStandard {
  CW
  WWT
  IICL
}

enum InspectionStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DEPRECATED
}

enum ItemType {
  CONTAINER
  INSPECTION
  REPAIR
  DELIVERY
  OTHER
}

enum KYBStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

enum KYCStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

enum ListingStatus {
  DRAFT
  PENDING_REVIEW
  ACTIVE
  PAUSED
  SOLD
  RENTED
  ARCHIVED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum MovementDirection {
  INBOUND
  OUTBOUND
}

enum MovementType {
  IN
  OUT
  TRANSFER
  ADJUSTMENT
}

enum NotificationChannel {
  EMAIL
  SMS
  IN_APP
  PUSH
}

enum OrderStatus {
  CREATED
  PENDING_PAYMENT
  PAYMENT_PENDING_VERIFICATION
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
  AWAITING_FUNDS
  ESCROW_FUNDED
  PREPARING_DELIVERY
  DOCUMENTS_READY
  TRANSPORTATION_BOOKED
  IN_TRANSIT
  PAYMENT_RELEASED
  DISPUTED
  READY_FOR_PICKUP
  DELIVERING
}

enum OverallRating {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum PartnerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum PartnerType {
  CARRIER
  INSPECTOR
  REPAIR_SHOP
  INSURANCE
  BANK
  OTHER
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  EWALLET
  CASH
}

enum PaymentProvider {
  VNPAY
  MOMO
  BANK_TRANSFER
  CASH
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  ESCROW_HOLD
  RELEASED
}

enum PermissionScope {
  GLOBAL
  OWN
  ORG
  DEPOT
}

enum PlanCycle {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum PolicyStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum QualityStandard {
  CW
  WWT
  IICL
}

enum QuoteStatus {
  DRAFT
  SUBMITTED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum RFQPurpose {
  PURCHASE
  RENTAL
  INQUIRY
}

enum RFQStatus {
  DRAFT
  SUBMITTED
  QUOTED
  ACCEPTED
  REJECTED
  EXPIRED
}

enum RefDocType {
  ORDER
  INSPECTION
  REPAIR
  TRANSFER
  ADJUSTMENT
}

enum RepairStatus {
  PENDING
  QUOTED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RoleInDepot {
  MANAGER
  STAFF
  INSPECTOR
  VIEWER
}

enum RoleInOrg {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Severity {
  CRITICAL
  MAJOR
  MINOR
  COSMETIC
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

enum TaxRateStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum TemplateStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum UserType {
  INDIVIDUAL
  COMPANY
  GOVERNMENT
}

enum DeliveryMethod {
  self_pickup
  logistics
  seller_delivers
}
