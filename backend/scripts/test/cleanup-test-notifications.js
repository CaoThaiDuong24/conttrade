import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function cleanupTestNotifications() {
  try {
    console.log('üßπ X√≥a T·∫§T C·∫¢ test notifications...\n');

    // X√≥a t·∫•t c·∫£ notifications
    const result = await prisma.$executeRaw`DELETE FROM notifications`;
    
    console.log(`‚úÖ ƒê√£ x√≥a ${result} test notifications`);
    console.log('\nüìã B√¢y gi·ªù h·ªá th·ªëng S·∫º CH·ªà hi·ªÉn th·ªã notifications TH·∫¨T t·ª´:');
    console.log('   - RFQ m·ªõi ƒë∆∞·ª£c t·∫°o');
    console.log('   - Quote m·ªõi ƒë∆∞·ª£c t·∫°o');
    console.log('   - Quote ƒë∆∞·ª£c accept');
    console.log('   - Quote ƒë∆∞·ª£c reject');
    console.log('\nüéØ ƒê·ªÉ test v·ªõi d·ªØ li·ªáu th·∫≠t:');
    console.log('   1. Login v·ªõi t√†i kho·∫£n Buyer');
    console.log('   2. T·∫°o RFQ m·ªõi cho m·ªôt listing');
    console.log('   3. Seller s·∫Ω nh·∫≠n notification TH·∫¨T');
    console.log('   4. Seller t·∫°o Quote');
    console.log('   5. Buyer s·∫Ω nh·∫≠n notification TH·∫¨T');
    console.log('\n‚úÖ HO√ÄN T·∫§T! H·ªá th·ªëng s·∫µn s√†ng v·ªõi d·ªØ li·ªáu th·∫≠t.');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupTestNotifications();
