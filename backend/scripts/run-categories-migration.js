import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
dotenv.config({ path: path.join(__dirname, '..', '.env') });

const prisma = new PrismaClient();

async function runMigration() {
  try {
    console.log('üöÄ Running categories table migration...\n');
    
    // Step 1: Create table
    console.log('[1/3] Creating categories table...');
    try {
      await prisma.$executeRawUnsafe(`
        CREATE TABLE IF NOT EXISTS "categories" (
          "id" TEXT PRIMARY KEY,
          "code" TEXT UNIQUE NOT NULL,
          "name" TEXT NOT NULL,
          "description" TEXT,
          "icon" TEXT,
          "sort_order" INTEGER DEFAULT 0,
          "created_at" TIMESTAMP DEFAULT NOW(),
          "updated_at" TIMESTAMP DEFAULT NOW()
        );
      `);
      console.log('‚úÖ Table created\n');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è  Table already exists\n');
      } else {
        throw error;
      }
    }
    
    // Step 2: Insert categories
    console.log('[2/3] Inserting categories...');
    try {
      await prisma.$executeRawUnsafe(`
        INSERT INTO "categories" ("id", "code", "name", "description", "icon", "sort_order") VALUES
          ('cat-listings', 'listings', 'Tin ƒëƒÉng', 'Qu·∫£n l√Ω tin ƒëƒÉng container', 'üìã', 1),
          ('cat-users', 'users', 'Ng∆∞·ªùi d√πng', 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng v√† h·ªì s∆°', 'üë§', 2),
          ('cat-rfq', 'rfq', 'Y√™u c·∫ßu b√°o gi√°', 'Qu·∫£n l√Ω RFQ (Request for Quote)', 'üìù', 3),
          ('cat-quotes', 'quotes', 'B√°o gi√°', 'Qu·∫£n l√Ω b√°o gi√°', 'üí∞', 4),
          ('cat-qa', 'qa', 'H·ªèi ƒë√°p', 'Qu·∫£n l√Ω Q&A', 'üí¨', 5),
          ('cat-moderation', 'moderation', 'Ki·ªÉm duy·ªát', 'Ki·ªÉm duy·ªát n·ªôi dung', 'üõ°Ô∏è', 6),
          ('cat-inspection', 'inspection', 'Gi√°m ƒë·ªãnh', 'Qu·∫£n l√Ω gi√°m ƒë·ªãnh container', 'üîç', 7),
          ('cat-orders', 'orders', 'ƒê∆°n h√†ng', 'Qu·∫£n l√Ω ƒë∆°n h√†ng', 'üõí', 8),
          ('cat-payments', 'payments', 'Thanh to√°n', 'Qu·∫£n l√Ω thanh to√°n', 'üí≥', 9),
          ('cat-delivery', 'delivery', 'V·∫≠n chuy·ªÉn', 'Qu·∫£n l√Ω v·∫≠n chuy·ªÉn', 'üöö', 10),
          ('cat-reviews', 'reviews', 'ƒê√°nh gi√°', 'Qu·∫£n l√Ω ƒë√°nh gi√°', '‚≠ê', 11),
          ('cat-disputes', 'disputes', 'Tranh ch·∫•p', 'Qu·∫£n l√Ω tranh ch·∫•p', '‚öñÔ∏è', 12),
          ('cat-admin', 'admin', 'Qu·∫£n tr·ªã', 'Qu·∫£n tr·ªã h·ªá th·ªëng', 'üëë', 13),
          ('cat-pricing', 'pricing', 'ƒê·ªãnh gi√°', 'Qu·∫£n l√Ω gi√° c·∫£', 'üí≤', 14),
          ('cat-depot', 'depot', 'Kho b√£i', 'Qu·∫£n l√Ω kho b√£i', 'üè≠', 15),
          ('cat-finance', 'finance', 'T√†i ch√≠nh', 'Qu·∫£n l√Ω t√†i ch√≠nh', 'üíµ', 16),
          ('cat-support', 'support', 'H·ªó tr·ª£', 'H·ªó tr·ª£ kh√°ch h√†ng', 'üéß', 17),
          ('cat-config', 'config', 'C·∫•u h√¨nh', 'C·∫•u h√¨nh h·ªá th·ªëng', '‚öôÔ∏è', 18)
        ON CONFLICT (code) DO UPDATE SET
          name = EXCLUDED.name,
          description = EXCLUDED.description,
          icon = EXCLUDED.icon,
          sort_order = EXCLUDED.sort_order,
          updated_at = NOW();
      `);
      console.log('‚úÖ Categories inserted\n');
    } catch (error) {
      console.error('‚ùå Insert failed:', error.message);
      throw error;
    }
    
    // Step 3: Create index
    console.log('[3/3] Creating index...');
    try {
      await prisma.$executeRawUnsafe(`
        CREATE INDEX IF NOT EXISTS "idx_categories_code" ON "categories"("code");
      `);
      console.log('‚úÖ Index created\n');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚ö†Ô∏è  Index already exists\n');
      } else {
        throw error;
      }
    }
    
    // Verify categories were inserted
    const count = await prisma.$queryRaw`SELECT COUNT(*) as count FROM categories`;
    console.log(`\n‚ú® Migration completed! Categories in database: ${count[0].count}`);
    
    // List all categories
    const categories = await prisma.$queryRaw`SELECT code, name, icon FROM categories ORDER BY sort_order`;
    console.log('\nüìã Categories:');
    categories.forEach(cat => {
      console.log(`  ${cat.icon} ${cat.code}: ${cat.name}`);
    });
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error.message);
    console.error(error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

runMigration();
