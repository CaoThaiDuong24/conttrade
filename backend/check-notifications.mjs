import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

dotenv.config({ path: './environment.env' });

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
});

async function checkNotifications() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra th√¥ng b√°o trong database...\n');
    
    const notifications = await prisma.notification.findMany({
      orderBy: {
        created_at: 'desc'
      },
      take: 10
    });
    
    console.log(`üìä T·ªïng s·ªë th√¥ng b√°o (10 m·ªõi nh·∫•t):\n`);
    
    if (notifications.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ th√¥ng b√°o n√†o trong database!\n');
      console.log('üí° G·ª£i √Ω: H√£y t·∫°o m·ªôt th√¥ng b√°o test ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng.\n');
    } else {
      notifications.forEach((notif, index) => {
        console.log(`\n${index + 1}. Th√¥ng b√°o ID: ${notif.id}`);
        console.log(`   üìù Ti√™u ƒë·ªÅ: ${notif.title}`);
        console.log(`   üí¨ N·ªôi dung: ${notif.message}`);
        console.log(`   üë§ User ID: ${notif.user_id}`);
        console.log(`   üîî Lo·∫°i: ${notif.type}`);
        console.log(`   ‚úÖ ƒê√£ ƒë·ªçc: ${notif.read ? 'C√≥' : 'Kh√¥ng'}`);
        console.log(`   üìÖ T·∫°o l√∫c: ${notif.created_at}`);
        if (notif.data) {
          console.log(`   üì¶ Data: ${JSON.stringify(notif.data)}`);
        }
      });
    }
    
    // Count unread notifications
    const unreadCount = await prisma.notification.count({
      where: { read: false }
    });
    
    console.log(`\nüìå T·ªïng s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc: ${unreadCount}`);
    
    // Count by user
    const notificationsByUser = await prisma.notification.groupBy({
      by: ['user_id'],
      _count: {
        id: true
      },
      orderBy: {
        _count: {
          id: 'desc'
        }
      }
    });
    
    console.log('\nüë• Th√¥ng b√°o theo User:');
    notificationsByUser.forEach(item => {
      console.log(`   User ${item.user_id}: ${item._count.id} th√¥ng b√°o`);
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra notifications:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkNotifications();
